//
// EventInsights2017.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


/** Insights for FIRST STEAMWORKS qualification and elimination matches. */

public struct EventInsights2017: Codable {

    /** Average foul score. */
    public var averageFoulScore: Float
    /** Average fuel points scored. */
    public var averageFuelPoints: Float
    /** Average fuel points scored during auto. */
    public var averageFuelPointsAuto: Float
    /** Average fuel points scored during teleop. */
    public var averageFuelPointsTeleop: Float
    /** Average points scored in the high goal. */
    public var averageHighGoals: Float
    /** Average points scored in the high goal during auto. */
    public var averageHighGoalsAuto: Float
    /** Average points scored in the high goal during teleop. */
    public var averageHighGoalsTeleop: Float
    /** Average points scored in the low goal. */
    public var averageLowGoals: Float
    /** Average points scored in the low goal during auto. */
    public var averageLowGoalsAuto: Float
    /** Average points scored in the low goal during teleop. */
    public var averageLowGoalsTeleop: Float
    /** Average mobility points scored during auto. */
    public var averageMobilityPointsAuto: Float
    /** Average points scored during auto. */
    public var averagePointsAuto: Float
    /** Average points scored during teleop. */
    public var averagePointsTeleop: Float
    /** Average rotor points scored. */
    public var averageRotorPoints: Float
    /** Average rotor points scored during auto. */
    public var averageRotorPointsAuto: Float
    /** Average rotor points scored during teleop. */
    public var averageRotorPointsTeleop: Float
    /** Average score. */
    public var averageScore: Float
    /** Average takeoff points scored during teleop. */
    public var averageTakeoffPointsTeleop: Float
    /** Average margin of victory. */
    public var averageWinMargin: Float
    /** Average winning score. */
    public var averageWinScore: Float
    /** An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match */
    public var highKpa: [String]
    /** An array with three values, high score, match key from the match with the high score, and the name of the match */
    public var highScore: [String]
    /** An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage. */
    public var kpaAchieved: [Float]
    /** An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage. */
    public var mobilityCounts: [Float]
    /** An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage. */
    public var rotor1Engaged: [Float]
    /** An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage. */
    public var rotor1EngagedAuto: [Float]
    /** An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage. */
    public var rotor2Engaged: [Float]
    /** An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage. */
    public var rotor2EngagedAuto: [Float]
    /** An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage. */
    public var rotor3Engaged: [Float]
    /** An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage. */
    public var rotor4Engaged: [Float]
    /** An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage. */
    public var takeoffCounts: [Float]
    /** An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage. */
    public var unicornMatches: [Float]

    public init(averageFoulScore: Float, averageFuelPoints: Float, averageFuelPointsAuto: Float, averageFuelPointsTeleop: Float, averageHighGoals: Float, averageHighGoalsAuto: Float, averageHighGoalsTeleop: Float, averageLowGoals: Float, averageLowGoalsAuto: Float, averageLowGoalsTeleop: Float, averageMobilityPointsAuto: Float, averagePointsAuto: Float, averagePointsTeleop: Float, averageRotorPoints: Float, averageRotorPointsAuto: Float, averageRotorPointsTeleop: Float, averageScore: Float, averageTakeoffPointsTeleop: Float, averageWinMargin: Float, averageWinScore: Float, highKpa: [String], highScore: [String], kpaAchieved: [Float], mobilityCounts: [Float], rotor1Engaged: [Float], rotor1EngagedAuto: [Float], rotor2Engaged: [Float], rotor2EngagedAuto: [Float], rotor3Engaged: [Float], rotor4Engaged: [Float], takeoffCounts: [Float], unicornMatches: [Float]) {
        self.averageFoulScore = averageFoulScore
        self.averageFuelPoints = averageFuelPoints
        self.averageFuelPointsAuto = averageFuelPointsAuto
        self.averageFuelPointsTeleop = averageFuelPointsTeleop
        self.averageHighGoals = averageHighGoals
        self.averageHighGoalsAuto = averageHighGoalsAuto
        self.averageHighGoalsTeleop = averageHighGoalsTeleop
        self.averageLowGoals = averageLowGoals
        self.averageLowGoalsAuto = averageLowGoalsAuto
        self.averageLowGoalsTeleop = averageLowGoalsTeleop
        self.averageMobilityPointsAuto = averageMobilityPointsAuto
        self.averagePointsAuto = averagePointsAuto
        self.averagePointsTeleop = averagePointsTeleop
        self.averageRotorPoints = averageRotorPoints
        self.averageRotorPointsAuto = averageRotorPointsAuto
        self.averageRotorPointsTeleop = averageRotorPointsTeleop
        self.averageScore = averageScore
        self.averageTakeoffPointsTeleop = averageTakeoffPointsTeleop
        self.averageWinMargin = averageWinMargin
        self.averageWinScore = averageWinScore
        self.highKpa = highKpa
        self.highScore = highScore
        self.kpaAchieved = kpaAchieved
        self.mobilityCounts = mobilityCounts
        self.rotor1Engaged = rotor1Engaged
        self.rotor1EngagedAuto = rotor1EngagedAuto
        self.rotor2Engaged = rotor2Engaged
        self.rotor2EngagedAuto = rotor2EngagedAuto
        self.rotor3Engaged = rotor3Engaged
        self.rotor4Engaged = rotor4Engaged
        self.takeoffCounts = takeoffCounts
        self.unicornMatches = unicornMatches
    }

    public enum CodingKeys: String, CodingKey { 
        case averageFoulScore = "average_foul_score"
        case averageFuelPoints = "average_fuel_points"
        case averageFuelPointsAuto = "average_fuel_points_auto"
        case averageFuelPointsTeleop = "average_fuel_points_teleop"
        case averageHighGoals = "average_high_goals"
        case averageHighGoalsAuto = "average_high_goals_auto"
        case averageHighGoalsTeleop = "average_high_goals_teleop"
        case averageLowGoals = "average_low_goals"
        case averageLowGoalsAuto = "average_low_goals_auto"
        case averageLowGoalsTeleop = "average_low_goals_teleop"
        case averageMobilityPointsAuto = "average_mobility_points_auto"
        case averagePointsAuto = "average_points_auto"
        case averagePointsTeleop = "average_points_teleop"
        case averageRotorPoints = "average_rotor_points"
        case averageRotorPointsAuto = "average_rotor_points_auto"
        case averageRotorPointsTeleop = "average_rotor_points_teleop"
        case averageScore = "average_score"
        case averageTakeoffPointsTeleop = "average_takeoff_points_teleop"
        case averageWinMargin = "average_win_margin"
        case averageWinScore = "average_win_score"
        case highKpa = "high_kpa"
        case highScore = "high_score"
        case kpaAchieved = "kpa_achieved"
        case mobilityCounts = "mobility_counts"
        case rotor1Engaged = "rotor_1_engaged"
        case rotor1EngagedAuto = "rotor_1_engaged_auto"
        case rotor2Engaged = "rotor_2_engaged"
        case rotor2EngagedAuto = "rotor_2_engaged_auto"
        case rotor3Engaged = "rotor_3_engaged"
        case rotor4Engaged = "rotor_4_engaged"
        case takeoffCounts = "takeoff_counts"
        case unicornMatches = "unicorn_matches"
    }


}

