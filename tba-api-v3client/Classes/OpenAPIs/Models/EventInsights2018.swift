//
// EventInsights2018.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


/** Insights for FIRST Power Up qualification and elimination matches. */

public struct EventInsights2018: Codable {

    /** An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage. */
    public var autoQuestAchieved: [Float]
    /** Average number of boost power up scored (out of 3). */
    public var averageBoostPlayed: Float
    /** Average endgame points. */
    public var averageEndgamePoints: Float
    /** Average number of force power up scored (out of 3). */
    public var averageForcePlayed: Float
    /** Average foul score. */
    public var averageFoulScore: Float
    /** Average points scored during auto. */
    public var averagePointsAuto: Float
    /** Average points scored during teleop. */
    public var averagePointsTeleop: Float
    /** Average mobility points scored during auto. */
    public var averageRunPointsAuto: Float
    /** Average scale ownership points scored. */
    public var averageScaleOwnershipPoints: Float
    /** Average scale ownership points scored during auto. */
    public var averageScaleOwnershipPointsAuto: Float
    /** Average scale ownership points scored during teleop. */
    public var averageScaleOwnershipPointsTeleop: Float
    /** Average score. */
    public var averageScore: Float
    /** Average switch ownership points scored. */
    public var averageSwitchOwnershipPoints: Float
    /** Average switch ownership points scored during auto. */
    public var averageSwitchOwnershipPointsAuto: Float
    /** Average switch ownership points scored during teleop. */
    public var averageSwitchOwnershipPointsTeleop: Float
    /** Average value points scored. */
    public var averageVaultPoints: Float
    /** Average margin of victory. */
    public var averageWinMargin: Float
    /** Average winning score. */
    public var averageWinScore: Float
    /** An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage. */
    public var boostPlayedCounts: [Float]
    /** An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage. */
    public var climbCounts: [Float]
    /** An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage. */
    public var faceTheBossAchieved: [Float]
    /** An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage. */
    public var forcePlayedCounts: [Float]
    /** An array with three values, high score, match key from the match with the high score, and the name of the match */
    public var highScore: [String]
    /** An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage. */
    public var levitatePlayedCounts: [Float]
    /** An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage. */
    public var runCountsAuto: [Float]
    /** Average scale neutral percentage. */
    public var scaleNeutralPercentage: Float
    /** Average scale neutral percentage during auto. */
    public var scaleNeutralPercentageAuto: Float
    /** Average scale neutral percentage during teleop. */
    public var scaleNeutralPercentageTeleop: Float
    /** An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage. */
    public var switchOwnedCountsAuto: [Float]
    /** An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage. */
    public var unicornMatches: [Float]
    /** Average opposing switch denail percentage for the winning alliance during teleop. */
    public var winningOppSwitchDenialPercentageTeleop: Float
    /** Average own switch ownership percentage for the winning alliance. */
    public var winningOwnSwitchOwnershipPercentage: Float
    /** Average own switch ownership percentage for the winning alliance during auto. */
    public var winningOwnSwitchOwnershipPercentageAuto: Float
    /** Average own switch ownership percentage for the winning alliance during teleop. */
    public var winningOwnSwitchOwnershipPercentageTeleop: Float
    /** Average scale ownership percentage for the winning alliance. */
    public var winningScaleOwnershipPercentage: Float
    /** Average scale ownership percentage for the winning alliance during auto. */
    public var winningScaleOwnershipPercentageAuto: Float
    /** Average scale ownership percentage for the winning alliance during teleop. */
    public var winningScaleOwnershipPercentageTeleop: Float

    public init(autoQuestAchieved: [Float], averageBoostPlayed: Float, averageEndgamePoints: Float, averageForcePlayed: Float, averageFoulScore: Float, averagePointsAuto: Float, averagePointsTeleop: Float, averageRunPointsAuto: Float, averageScaleOwnershipPoints: Float, averageScaleOwnershipPointsAuto: Float, averageScaleOwnershipPointsTeleop: Float, averageScore: Float, averageSwitchOwnershipPoints: Float, averageSwitchOwnershipPointsAuto: Float, averageSwitchOwnershipPointsTeleop: Float, averageVaultPoints: Float, averageWinMargin: Float, averageWinScore: Float, boostPlayedCounts: [Float], climbCounts: [Float], faceTheBossAchieved: [Float], forcePlayedCounts: [Float], highScore: [String], levitatePlayedCounts: [Float], runCountsAuto: [Float], scaleNeutralPercentage: Float, scaleNeutralPercentageAuto: Float, scaleNeutralPercentageTeleop: Float, switchOwnedCountsAuto: [Float], unicornMatches: [Float], winningOppSwitchDenialPercentageTeleop: Float, winningOwnSwitchOwnershipPercentage: Float, winningOwnSwitchOwnershipPercentageAuto: Float, winningOwnSwitchOwnershipPercentageTeleop: Float, winningScaleOwnershipPercentage: Float, winningScaleOwnershipPercentageAuto: Float, winningScaleOwnershipPercentageTeleop: Float) {
        self.autoQuestAchieved = autoQuestAchieved
        self.averageBoostPlayed = averageBoostPlayed
        self.averageEndgamePoints = averageEndgamePoints
        self.averageForcePlayed = averageForcePlayed
        self.averageFoulScore = averageFoulScore
        self.averagePointsAuto = averagePointsAuto
        self.averagePointsTeleop = averagePointsTeleop
        self.averageRunPointsAuto = averageRunPointsAuto
        self.averageScaleOwnershipPoints = averageScaleOwnershipPoints
        self.averageScaleOwnershipPointsAuto = averageScaleOwnershipPointsAuto
        self.averageScaleOwnershipPointsTeleop = averageScaleOwnershipPointsTeleop
        self.averageScore = averageScore
        self.averageSwitchOwnershipPoints = averageSwitchOwnershipPoints
        self.averageSwitchOwnershipPointsAuto = averageSwitchOwnershipPointsAuto
        self.averageSwitchOwnershipPointsTeleop = averageSwitchOwnershipPointsTeleop
        self.averageVaultPoints = averageVaultPoints
        self.averageWinMargin = averageWinMargin
        self.averageWinScore = averageWinScore
        self.boostPlayedCounts = boostPlayedCounts
        self.climbCounts = climbCounts
        self.faceTheBossAchieved = faceTheBossAchieved
        self.forcePlayedCounts = forcePlayedCounts
        self.highScore = highScore
        self.levitatePlayedCounts = levitatePlayedCounts
        self.runCountsAuto = runCountsAuto
        self.scaleNeutralPercentage = scaleNeutralPercentage
        self.scaleNeutralPercentageAuto = scaleNeutralPercentageAuto
        self.scaleNeutralPercentageTeleop = scaleNeutralPercentageTeleop
        self.switchOwnedCountsAuto = switchOwnedCountsAuto
        self.unicornMatches = unicornMatches
        self.winningOppSwitchDenialPercentageTeleop = winningOppSwitchDenialPercentageTeleop
        self.winningOwnSwitchOwnershipPercentage = winningOwnSwitchOwnershipPercentage
        self.winningOwnSwitchOwnershipPercentageAuto = winningOwnSwitchOwnershipPercentageAuto
        self.winningOwnSwitchOwnershipPercentageTeleop = winningOwnSwitchOwnershipPercentageTeleop
        self.winningScaleOwnershipPercentage = winningScaleOwnershipPercentage
        self.winningScaleOwnershipPercentageAuto = winningScaleOwnershipPercentageAuto
        self.winningScaleOwnershipPercentageTeleop = winningScaleOwnershipPercentageTeleop
    }

    public enum CodingKeys: String, CodingKey { 
        case autoQuestAchieved = "auto_quest_achieved"
        case averageBoostPlayed = "average_boost_played"
        case averageEndgamePoints = "average_endgame_points"
        case averageForcePlayed = "average_force_played"
        case averageFoulScore = "average_foul_score"
        case averagePointsAuto = "average_points_auto"
        case averagePointsTeleop = "average_points_teleop"
        case averageRunPointsAuto = "average_run_points_auto"
        case averageScaleOwnershipPoints = "average_scale_ownership_points"
        case averageScaleOwnershipPointsAuto = "average_scale_ownership_points_auto"
        case averageScaleOwnershipPointsTeleop = "average_scale_ownership_points_teleop"
        case averageScore = "average_score"
        case averageSwitchOwnershipPoints = "average_switch_ownership_points"
        case averageSwitchOwnershipPointsAuto = "average_switch_ownership_points_auto"
        case averageSwitchOwnershipPointsTeleop = "average_switch_ownership_points_teleop"
        case averageVaultPoints = "average_vault_points"
        case averageWinMargin = "average_win_margin"
        case averageWinScore = "average_win_score"
        case boostPlayedCounts = "boost_played_counts"
        case climbCounts = "climb_counts"
        case faceTheBossAchieved = "face_the_boss_achieved"
        case forcePlayedCounts = "force_played_counts"
        case highScore = "high_score"
        case levitatePlayedCounts = "levitate_played_counts"
        case runCountsAuto = "run_counts_auto"
        case scaleNeutralPercentage = "scale_neutral_percentage"
        case scaleNeutralPercentageAuto = "scale_neutral_percentage_auto"
        case scaleNeutralPercentageTeleop = "scale_neutral_percentage_teleop"
        case switchOwnedCountsAuto = "switch_owned_counts_auto"
        case unicornMatches = "unicorn_matches"
        case winningOppSwitchDenialPercentageTeleop = "winning_opp_switch_denial_percentage_teleop"
        case winningOwnSwitchOwnershipPercentage = "winning_own_switch_ownership_percentage"
        case winningOwnSwitchOwnershipPercentageAuto = "winning_own_switch_ownership_percentage_auto"
        case winningOwnSwitchOwnershipPercentageTeleop = "winning_own_switch_ownership_percentage_teleop"
        case winningScaleOwnershipPercentage = "winning_scale_ownership_percentage"
        case winningScaleOwnershipPercentageAuto = "winning_scale_ownership_percentage_auto"
        case winningScaleOwnershipPercentageTeleop = "winning_scale_ownership_percentage_teleop"
    }


}

