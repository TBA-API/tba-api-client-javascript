//
// Event.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct Event: Codable {

    /** TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event. */
    public var key: String
    /** Official name of event on record either provided by FIRST or organizers of offseason event. */
    public var name: String
    /** Event short code, as provided by FIRST. */
    public var eventCode: String
    /** Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2 */
    public var eventType: Int
    public var district: DistrictList?
    /** City, town, village, etc. the event is located in. */
    public var city: String?
    /** State or Province the event is located in. */
    public var stateProv: String?
    /** Country the event is located in. */
    public var country: String?
    /** Event start date in &#x60;yyyy-mm-dd&#x60; format. */
    public var startDate: Date
    /** Event end date in &#x60;yyyy-mm-dd&#x60; format. */
    public var endDate: Date
    /** Year the event data is for. */
    public var year: Int
    /** Same as &#x60;name&#x60; but doesn&#39;t include event specifiers, such as &#39;Regional&#39; or &#39;District&#39;. May be null. */
    public var shortName: String?
    /** Event Type, eg Regional, District, or Offseason. */
    public var eventTypeString: String
    /** Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 &#39;preseason&#39; event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.) */
    public var week: Int?
    /** Address of the event&#39;s venue, if available. */
    public var address: String?
    /** Postal code from the event address. */
    public var postalCode: String?
    /** Google Maps Place ID for the event address. */
    public var gmapsPlaceId: String?
    /** Link to address location on Google Maps. */
    public var gmapsUrl: String?
    /** Latitude for the event address. */
    public var lat: Double?
    /** Longitude for the event address. */
    public var lng: Double?
    /** Name of the location at the address for the event, eg. Blue Alliance High School. */
    public var locationName: String?
    /** Timezone name. */
    public var timezone: String?
    /** The event&#39;s website, if any. */
    public var website: String?
    /** The FIRST internal Event ID, used to link to the event on the FRC webpage. */
    public var firstEventId: String?
    /** Public facing event code used by FIRST (on frc-events.firstinspires.org, for example) */
    public var firstEventCode: String?
    public var webcasts: [Webcast]?
    /** An array of event keys for the divisions at this event. */
    public var divisionKeys: [String]?
    /** The TBA Event key that represents the event&#39;s parent. Used to link back to the event from a division event. It is also the inverse relation of &#x60;divison_keys&#x60;. */
    public var parentEventKey: String?
    /** Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null. */
    public var playoffType: Int?
    /** String representation of the &#x60;playoff_type&#x60;, or null. */
    public var playoffTypeString: String?

    public init(key: String, name: String, eventCode: String, eventType: Int, district: DistrictList?, city: String?, stateProv: String?, country: String?, startDate: Date, endDate: Date, year: Int, shortName: String?, eventTypeString: String, week: Int?, address: String?, postalCode: String?, gmapsPlaceId: String?, gmapsUrl: String?, lat: Double?, lng: Double?, locationName: String?, timezone: String?, website: String?, firstEventId: String?, firstEventCode: String?, webcasts: [Webcast]?, divisionKeys: [String]?, parentEventKey: String?, playoffType: Int?, playoffTypeString: String?) {
        self.key = key
        self.name = name
        self.eventCode = eventCode
        self.eventType = eventType
        self.district = district
        self.city = city
        self.stateProv = stateProv
        self.country = country
        self.startDate = startDate
        self.endDate = endDate
        self.year = year
        self.shortName = shortName
        self.eventTypeString = eventTypeString
        self.week = week
        self.address = address
        self.postalCode = postalCode
        self.gmapsPlaceId = gmapsPlaceId
        self.gmapsUrl = gmapsUrl
        self.lat = lat
        self.lng = lng
        self.locationName = locationName
        self.timezone = timezone
        self.website = website
        self.firstEventId = firstEventId
        self.firstEventCode = firstEventCode
        self.webcasts = webcasts
        self.divisionKeys = divisionKeys
        self.parentEventKey = parentEventKey
        self.playoffType = playoffType
        self.playoffTypeString = playoffTypeString
    }

    public enum CodingKeys: String, CodingKey { 
        case key
        case name
        case eventCode = "event_code"
        case eventType = "event_type"
        case district
        case city
        case stateProv = "state_prov"
        case country
        case startDate = "start_date"
        case endDate = "end_date"
        case year
        case shortName = "short_name"
        case eventTypeString = "event_type_string"
        case week
        case address
        case postalCode = "postal_code"
        case gmapsPlaceId = "gmaps_place_id"
        case gmapsUrl = "gmaps_url"
        case lat
        case lng
        case locationName = "location_name"
        case timezone
        case website
        case firstEventId = "first_event_id"
        case firstEventCode = "first_event_code"
        case webcasts
        case divisionKeys = "division_keys"
        case parentEventKey = "parent_event_key"
        case playoffType = "playoff_type"
        case playoffTypeString = "playoff_type_string"
    }


}

