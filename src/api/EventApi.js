/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Award', 'model/EliminationAlliance', 'model/Event', 'model/EventDistrictPoints', 'model/EventInsights', 'model/EventOPRs', 'model/EventPredictions', 'model/EventRanking', 'model/EventSimple', 'model/Match', 'model/MatchSimple', 'model/Team', 'model/TeamEventStatus', 'model/TeamSimple'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Award'), require('../model/EliminationAlliance'), require('../model/Event'), require('../model/EventDistrictPoints'), require('../model/EventInsights'), require('../model/EventOPRs'), require('../model/EventPredictions'), require('../model/EventRanking'), require('../model/EventSimple'), require('../model/Match'), require('../model/MatchSimple'), require('../model/Team'), require('../model/TeamEventStatus'), require('../model/TeamSimple'));
  } else {
    // Browser globals (root is window)
    if (!root.TbaApiV3client) {
      root.TbaApiV3client = {};
    }
    root.TbaApiV3client.EventApi = factory(root.TbaApiV3client.ApiClient, root.TbaApiV3client.Award, root.TbaApiV3client.EliminationAlliance, root.TbaApiV3client.Event, root.TbaApiV3client.EventDistrictPoints, root.TbaApiV3client.EventInsights, root.TbaApiV3client.EventOPRs, root.TbaApiV3client.EventPredictions, root.TbaApiV3client.EventRanking, root.TbaApiV3client.EventSimple, root.TbaApiV3client.Match, root.TbaApiV3client.MatchSimple, root.TbaApiV3client.Team, root.TbaApiV3client.TeamEventStatus, root.TbaApiV3client.TeamSimple);
  }
}(this, function(ApiClient, Award, EliminationAlliance, Event, EventDistrictPoints, EventInsights, EventOPRs, EventPredictions, EventRanking, EventSimple, Match, MatchSimple, Team, TeamEventStatus, TeamSimple) {
  'use strict';

  /**
   * Event service.
   * @module api/EventApi
   * @version 3.03.1
   */

  /**
   * Constructs a new EventApi. 
   * @alias module:api/EventApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDistrictEvents operation.
     * @callback module:api/EventApi~getDistrictEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events in the given district.
     * @param {String} districtKey TBA District Key, eg &#x60;2016fim&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getDistrictEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.getDistrictEvents = function(districtKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEvents");
      }


      var pathParams = {
        'district_key': districtKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/district/{district_key}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictEventsKeys operation.
     * @callback module:api/EventApi~getDistrictEventsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of event keys for events in the given district.
     * @param {String} districtKey TBA District Key, eg &#x60;2016fim&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getDistrictEventsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getDistrictEventsKeys = function(districtKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEventsKeys");
      }


      var pathParams = {
        'district_key': districtKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/district/{district_key}/events/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictEventsSimple operation.
     * @callback module:api/EventApi~getDistrictEventsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events in the given district.
     * @param {String} districtKey TBA District Key, eg &#x60;2016fim&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getDistrictEventsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    this.getDistrictEventsSimple = function(districtKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictEventsSimple");
      }


      var pathParams = {
        'district_key': districtKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EventSimple];

      return this.apiClient.callApi(
        '/district/{district_key}/events/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvent operation.
     * @callback module:api/EventApi~getEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.getEvent = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEvent");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/event/{event_key}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventAlliances operation.
     * @callback module:api/EventApi~getEventAlliancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EliminationAlliance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Elimination Alliances for the given Event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventAlliancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EliminationAlliance>}
     */
    this.getEventAlliances = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventAlliances");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EliminationAlliance];

      return this.apiClient.callApi(
        '/event/{event_key}/alliances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventAwards operation.
     * @callback module:api/EventApi~getEventAwardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Award>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of awards from the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventAwardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Award>}
     */
    this.getEventAwards = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventAwards");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Award];

      return this.apiClient.callApi(
        '/event/{event_key}/awards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventDistrictPoints operation.
     * @callback module:api/EventApi~getEventDistrictPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDistrictPoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of team rankings for the Event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventDistrictPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDistrictPoints}
     */
    this.getEventDistrictPoints = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventDistrictPoints");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EventDistrictPoints;

      return this.apiClient.callApi(
        '/event/{event_key}/district_points', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventInsights operation.
     * @callback module:api/EventApi~getEventInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventInsights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a set of Event-specific insights for the given Event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventInsights}
     */
    this.getEventInsights = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventInsights");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EventInsights;

      return this.apiClient.callApi(
        '/event/{event_key}/insights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatchTimeseries operation.
     * @callback module:api/EventApi~getEventMatchTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getEventMatchTimeseries = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatchTimeseries");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/event/{event_key}/matches/timeseries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatches operation.
     * @callback module:api/EventApi~getEventMatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of matches for the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    this.getEventMatches = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatches");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Match];

      return this.apiClient.callApi(
        '/event/{event_key}/matches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatchesKeys operation.
     * @callback module:api/EventApi~getEventMatchesKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of match keys for the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchesKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getEventMatchesKeys = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatchesKeys");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/event/{event_key}/matches/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMatchesSimple operation.
     * @callback module:api/EventApi~getEventMatchesSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MatchSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of matches for the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventMatchesSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MatchSimple>}
     */
    this.getEventMatchesSimple = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventMatchesSimple");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MatchSimple];

      return this.apiClient.callApi(
        '/event/{event_key}/matches/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventOPRs operation.
     * @callback module:api/EventApi~getEventOPRsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventOPRs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventOPRsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventOPRs}
     */
    this.getEventOPRs = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventOPRs");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EventOPRs;

      return this.apiClient.callApi(
        '/event/{event_key}/oprs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventPredictions operation.
     * @callback module:api/EventApi~getEventPredictionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventPredictions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventPredictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventPredictions}
     */
    this.getEventPredictions = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventPredictions");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EventPredictions;

      return this.apiClient.callApi(
        '/event/{event_key}/predictions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventRankings operation.
     * @callback module:api/EventApi~getEventRankingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventRanking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of team rankings for the Event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventRankingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventRanking}
     */
    this.getEventRankings = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventRankings");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EventRanking;

      return this.apiClient.callApi(
        '/event/{event_key}/rankings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventSimple operation.
     * @callback module:api/EventApi~getEventSimpleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form Event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSimple}
     */
    this.getEventSimple = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventSimple");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EventSimple;

      return this.apiClient.callApi(
        '/event/{event_key}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeams operation.
     * @callback module:api/EventApi~getEventTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    this.getEventTeams = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeams");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Team];

      return this.apiClient.callApi(
        '/event/{event_key}/teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsKeys operation.
     * @callback module:api/EventApi~getEventTeamsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; keys that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getEventTeamsKeys = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsKeys");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/event/{event_key}/teams/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsSimple operation.
     * @callback module:api/EventApi~getEventTeamsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    this.getEventTeamsSimple = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsSimple");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TeamSimple];

      return this.apiClient.callApi(
        '/event/{event_key}/teams/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsStatuses operation.
     * @callback module:api/EventApi~getEventTeamsStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventTeamsStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{'String': TeamEventStatus}>}
     */
    this.getEventTeamsStatuses = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsStatuses");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': TeamEventStatus};

      return this.apiClient.callApi(
        '/event/{event_key}/teams/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYear operation.
     * @callback module:api/EventApi~getEventsByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventsByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.getEventsByYear = function(year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYear");
      }


      var pathParams = {
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/events/{year}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYearKeys operation.
     * @callback module:api/EventApi~getEventsByYearKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of event keys in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventsByYearKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getEventsByYearKeys = function(year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYearKeys");
      }


      var pathParams = {
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/events/{year}/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByYearSimple operation.
     * @callback module:api/EventApi~getEventsByYearSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events in the given year.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getEventsByYearSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    this.getEventsByYearSimple = function(year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEventsByYearSimple");
      }


      var pathParams = {
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EventSimple];

      return this.apiClient.callApi(
        '/events/{year}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventAwards operation.
     * @callback module:api/EventApi~getTeamEventAwardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Award>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of awards the given team won at the given event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventAwardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Award>}
     */
    this.getTeamEventAwards = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventAwards");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventAwards");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Award];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/awards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatches operation.
     * @callback module:api/EventApi~getTeamEventMatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventMatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    this.getTeamEventMatches = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatches");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatches");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Match];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatchesKeys operation.
     * @callback module:api/EventApi~getTeamEventMatchesKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of match keys for matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventMatchesKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamEventMatchesKeys = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatchesKeys");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatchesKeys");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatchesSimple operation.
     * @callback module:api/EventApi~getTeamEventMatchesSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventMatchesSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    this.getTeamEventMatchesSimple = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatchesSimple");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatchesSimple");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Match];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventStatus operation.
     * @callback module:api/EventApi~getTeamEventStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamEventStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the competition rank and status of the team at the given event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamEventStatus}
     */
    this.getTeamEventStatus = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventStatus");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventStatus");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TeamEventStatus;

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEvents operation.
     * @callback module:api/EventApi~getTeamEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.getTeamEvents = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEvents");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/team/{team_key}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYear operation.
     * @callback module:api/EventApi~getTeamEventsByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.getTeamEventsByYear = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYearKeys operation.
     * @callback module:api/EventApi~getTeamEventsByYearKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the event keys for events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsByYearKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamEventsByYearKeys = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYearKeys");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYearKeys");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYearSimple operation.
     * @callback module:api/EventApi~getTeamEventsByYearSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsByYearSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    this.getTeamEventsByYearSimple = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYearSimple");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYearSimple");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EventSimple];

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsKeys operation.
     * @callback module:api/EventApi~getTeamEventsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the event keys for all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamEventsKeys = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsKeys");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/team/{team_key}/events/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsSimple operation.
     * @callback module:api/EventApi~getTeamEventsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    this.getTeamEventsSimple = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsSimple");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EventSimple];

      return this.apiClient.callApi(
        '/team/{team_key}/events/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsStatusesByYear operation.
     * @callback module:api/EventApi~getTeamEventsStatusesByYearCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/EventApi~getTeamEventsStatusesByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{'String': TeamEventStatus}>}
     */
    this.getTeamEventsStatusesByYear = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsStatusesByYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsStatusesByYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': TeamEventStatus};

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
