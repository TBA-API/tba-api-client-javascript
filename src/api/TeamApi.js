/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Award', 'model/DistrictList', 'model/DistrictRanking', 'model/Event', 'model/EventSimple', 'model/Match', 'model/MatchSimple', 'model/Media', 'model/Team', 'model/TeamEventStatus', 'model/TeamRobot', 'model/TeamSimple'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Award'), require('../model/DistrictList'), require('../model/DistrictRanking'), require('../model/Event'), require('../model/EventSimple'), require('../model/Match'), require('../model/MatchSimple'), require('../model/Media'), require('../model/Team'), require('../model/TeamEventStatus'), require('../model/TeamRobot'), require('../model/TeamSimple'));
  } else {
    // Browser globals (root is window)
    if (!root.TbaApiV3client) {
      root.TbaApiV3client = {};
    }
    root.TbaApiV3client.TeamApi = factory(root.TbaApiV3client.ApiClient, root.TbaApiV3client.Award, root.TbaApiV3client.DistrictList, root.TbaApiV3client.DistrictRanking, root.TbaApiV3client.Event, root.TbaApiV3client.EventSimple, root.TbaApiV3client.Match, root.TbaApiV3client.MatchSimple, root.TbaApiV3client.Media, root.TbaApiV3client.Team, root.TbaApiV3client.TeamEventStatus, root.TbaApiV3client.TeamRobot, root.TbaApiV3client.TeamSimple);
  }
}(this, function(ApiClient, Award, DistrictList, DistrictRanking, Event, EventSimple, Match, MatchSimple, Media, Team, TeamEventStatus, TeamRobot, TeamSimple) {
  'use strict';

  /**
   * Team service.
   * @module api/TeamApi
   * @version 3.03.1
   */

  /**
   * Constructs a new TeamApi. 
   * @alias module:api/TeamApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDistrictRankings operation.
     * @callback module:api/TeamApi~getDistrictRankingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistrictRanking>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of team district rankings for the given district.
     * @param {String} districtKey TBA District Key, eg &#x60;2016fim&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getDistrictRankingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistrictRanking>}
     */
    this.getDistrictRankings = function(districtKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictRankings");
      }


      var pathParams = {
        'district_key': districtKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DistrictRanking];

      return this.apiClient.callApi(
        '/district/{district_key}/rankings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictTeams operation.
     * @callback module:api/TeamApi~getDistrictTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
     * @param {String} districtKey TBA District Key, eg &#x60;2016fim&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getDistrictTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    this.getDistrictTeams = function(districtKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictTeams");
      }


      var pathParams = {
        'district_key': districtKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Team];

      return this.apiClient.callApi(
        '/district/{district_key}/teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictTeamsKeys operation.
     * @callback module:api/TeamApi~getDistrictTeamsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
     * @param {String} districtKey TBA District Key, eg &#x60;2016fim&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getDistrictTeamsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getDistrictTeamsKeys = function(districtKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictTeamsKeys");
      }


      var pathParams = {
        'district_key': districtKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/district/{district_key}/teams/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictTeamsSimple operation.
     * @callback module:api/TeamApi~getDistrictTeamsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
     * @param {String} districtKey TBA District Key, eg &#x60;2016fim&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getDistrictTeamsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    this.getDistrictTeamsSimple = function(districtKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'districtKey' is set
      if (districtKey === undefined || districtKey === null) {
        throw new Error("Missing the required parameter 'districtKey' when calling getDistrictTeamsSimple");
      }


      var pathParams = {
        'district_key': districtKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TeamSimple];

      return this.apiClient.callApi(
        '/district/{district_key}/teams/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeams operation.
     * @callback module:api/TeamApi~getEventTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getEventTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    this.getEventTeams = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeams");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Team];

      return this.apiClient.callApi(
        '/event/{event_key}/teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsKeys operation.
     * @callback module:api/TeamApi~getEventTeamsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; keys that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getEventTeamsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getEventTeamsKeys = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsKeys");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/event/{event_key}/teams/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsSimple operation.
     * @callback module:api/TeamApi~getEventTeamsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getEventTeamsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    this.getEventTeamsSimple = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsSimple");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TeamSimple];

      return this.apiClient.callApi(
        '/event/{event_key}/teams/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTeamsStatuses operation.
     * @callback module:api/TeamApi~getEventTeamsStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getEventTeamsStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{'String': TeamEventStatus}>}
     */
    this.getEventTeamsStatuses = function(eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getEventTeamsStatuses");
      }


      var pathParams = {
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': TeamEventStatus};

      return this.apiClient.callApi(
        '/event/{event_key}/teams/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeam operation.
     * @callback module:api/TeamApi~getTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Team&#x60; object for the team referenced by the given key.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    this.getTeam = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeam");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Team;

      return this.apiClient.callApi(
        '/team/{team_key}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamAwards operation.
     * @callback module:api/TeamApi~getTeamAwardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Award>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of awards the given team has won.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamAwardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Award>}
     */
    this.getTeamAwards = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamAwards");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Award];

      return this.apiClient.callApi(
        '/team/{team_key}/awards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamAwardsByYear operation.
     * @callback module:api/TeamApi~getTeamAwardsByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Award>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of awards the given team has won in a given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamAwardsByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Award>}
     */
    this.getTeamAwardsByYear = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamAwardsByYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamAwardsByYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Award];

      return this.apiClient.callApi(
        '/team/{team_key}/awards/{year}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamDistricts operation.
     * @callback module:api/TeamApi~getTeamDistrictsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistrictList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamDistrictsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistrictList>}
     */
    this.getTeamDistricts = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamDistricts");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DistrictList];

      return this.apiClient.callApi(
        '/team/{team_key}/districts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventAwards operation.
     * @callback module:api/TeamApi~getTeamEventAwardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Award>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of awards the given team won at the given event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventAwardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Award>}
     */
    this.getTeamEventAwards = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventAwards");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventAwards");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Award];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/awards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatches operation.
     * @callback module:api/TeamApi~getTeamEventMatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventMatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    this.getTeamEventMatches = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatches");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatches");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Match];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatchesKeys operation.
     * @callback module:api/TeamApi~getTeamEventMatchesKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of match keys for matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventMatchesKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamEventMatchesKeys = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatchesKeys");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatchesKeys");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventMatchesSimple operation.
     * @callback module:api/TeamApi~getTeamEventMatchesSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of matches for the given team and event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventMatchesSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    this.getTeamEventMatchesSimple = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventMatchesSimple");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventMatchesSimple");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Match];

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/matches/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventStatus operation.
     * @callback module:api/TeamApi~getTeamEventStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamEventStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the competition rank and status of the team at the given event.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} eventKey TBA Event Key, eg &#x60;2016nytr&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamEventStatus}
     */
    this.getTeamEventStatus = function(teamKey, eventKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventStatus");
      }

      // verify the required parameter 'eventKey' is set
      if (eventKey === undefined || eventKey === null) {
        throw new Error("Missing the required parameter 'eventKey' when calling getTeamEventStatus");
      }


      var pathParams = {
        'team_key': teamKey,
        'event_key': eventKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TeamEventStatus;

      return this.apiClient.callApi(
        '/team/{team_key}/event/{event_key}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEvents operation.
     * @callback module:api/TeamApi~getTeamEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.getTeamEvents = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEvents");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/team/{team_key}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYear operation.
     * @callback module:api/TeamApi~getTeamEventsByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventsByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.getTeamEventsByYear = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYearKeys operation.
     * @callback module:api/TeamApi~getTeamEventsByYearKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the event keys for events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventsByYearKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamEventsByYearKeys = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYearKeys");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYearKeys");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsByYearSimple operation.
     * @callback module:api/TeamApi~getTeamEventsByYearSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventsByYearSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    this.getTeamEventsByYearSimple = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsByYearSimple");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsByYearSimple");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EventSimple];

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsKeys operation.
     * @callback module:api/TeamApi~getTeamEventsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the event keys for all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamEventsKeys = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsKeys");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/team/{team_key}/events/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsSimple operation.
     * @callback module:api/TeamApi~getTeamEventsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of all events this team has competed at.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSimple>}
     */
    this.getTeamEventsSimple = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsSimple");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EventSimple];

      return this.apiClient.callApi(
        '/team/{team_key}/events/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamEventsStatusesByYear operation.
     * @callback module:api/TeamApi~getTeamEventsStatusesByYearCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': TeamEventStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamEventsStatusesByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{'String': TeamEventStatus}>}
     */
    this.getTeamEventsStatusesByYear = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamEventsStatusesByYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamEventsStatusesByYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': TeamEventStatus};

      return this.apiClient.callApi(
        '/team/{team_key}/events/{year}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMatchesByYear operation.
     * @callback module:api/TeamApi~getTeamMatchesByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Match>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of matches for the given team and year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamMatchesByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Match>}
     */
    this.getTeamMatchesByYear = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamMatchesByYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamMatchesByYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Match];

      return this.apiClient.callApi(
        '/team/{team_key}/matches/{year}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMatchesByYearKeys operation.
     * @callback module:api/TeamApi~getTeamMatchesByYearKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of match keys for matches for the given team and year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamMatchesByYearKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamMatchesByYearKeys = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamMatchesByYearKeys");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamMatchesByYearKeys");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/team/{team_key}/matches/{year}/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMatchesByYearSimple operation.
     * @callback module:api/TeamApi~getTeamMatchesByYearSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MatchSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a short-form list of matches for the given team and year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamMatchesByYearSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MatchSimple>}
     */
    this.getTeamMatchesByYearSimple = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamMatchesByYearSimple");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamMatchesByYearSimple");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [MatchSimple];

      return this.apiClient.callApi(
        '/team/{team_key}/matches/{year}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMediaByTag operation.
     * @callback module:api/TeamApi~getTeamMediaByTagCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Media>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Media (videos / pictures) for the given team and tag.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} mediaTag Media Tag which describes the Media.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamMediaByTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Media>}
     */
    this.getTeamMediaByTag = function(teamKey, mediaTag, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamMediaByTag");
      }

      // verify the required parameter 'mediaTag' is set
      if (mediaTag === undefined || mediaTag === null) {
        throw new Error("Missing the required parameter 'mediaTag' when calling getTeamMediaByTag");
      }


      var pathParams = {
        'team_key': teamKey,
        'media_tag': mediaTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Media];

      return this.apiClient.callApi(
        '/team/{team_key}/media/tag/{media_tag}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMediaByTagYear operation.
     * @callback module:api/TeamApi~getTeamMediaByTagYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Media>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Media (videos / pictures) for the given team, tag and year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {String} mediaTag Media Tag which describes the Media.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamMediaByTagYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Media>}
     */
    this.getTeamMediaByTagYear = function(teamKey, mediaTag, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamMediaByTagYear");
      }

      // verify the required parameter 'mediaTag' is set
      if (mediaTag === undefined || mediaTag === null) {
        throw new Error("Missing the required parameter 'mediaTag' when calling getTeamMediaByTagYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamMediaByTagYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'media_tag': mediaTag,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Media];

      return this.apiClient.callApi(
        '/team/{team_key}/media/tag/{media_tag}/{year}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMediaByYear operation.
     * @callback module:api/TeamApi~getTeamMediaByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Media>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Media (videos / pictures) for the given team and year.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamMediaByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Media>}
     */
    this.getTeamMediaByYear = function(teamKey, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamMediaByYear");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamMediaByYear");
      }


      var pathParams = {
        'team_key': teamKey,
        'year': year
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Media];

      return this.apiClient.callApi(
        '/team/{team_key}/media/{year}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamRobots operation.
     * @callback module:api/TeamApi~getTeamRobotsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamRobot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamRobotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamRobot>}
     */
    this.getTeamRobots = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamRobots");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TeamRobot];

      return this.apiClient.callApi(
        '/team/{team_key}/robots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamSimple operation.
     * @callback module:api/TeamApi~getTeamSimpleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Team_Simple&#x60; object for the team referenced by the given key.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamSimple}
     */
    this.getTeamSimple = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamSimple");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TeamSimple;

      return this.apiClient.callApi(
        '/team/{team_key}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamSocialMedia operation.
     * @callback module:api/TeamApi~getTeamSocialMediaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Media>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Media (social media) for the given team.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamSocialMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Media>}
     */
    this.getTeamSocialMedia = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamSocialMedia");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Media];

      return this.apiClient.callApi(
        '/team/{team_key}/social_media', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamYearsParticipated operation.
     * @callback module:api/TeamApi~getTeamYearsParticipatedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of years in which the team participated in at least one competition.
     * @param {String} teamKey TBA Team Key, eg &#x60;frc254&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamYearsParticipatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getTeamYearsParticipated = function(teamKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamKey' is set
      if (teamKey === undefined || teamKey === null) {
        throw new Error("Missing the required parameter 'teamKey' when calling getTeamYearsParticipated");
      }


      var pathParams = {
        'team_key': teamKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/team/{team_key}/years_participated', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeams operation.
     * @callback module:api/TeamApi~getTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    this.getTeams = function(pageNum, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeams");
      }


      var pathParams = {
        'page_num': pageNum
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Team];

      return this.apiClient.callApi(
        '/teams/{page_num}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsByYear operation.
     * @callback module:api/TeamApi~getTeamsByYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamsByYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    this.getTeamsByYear = function(year, pageNum, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamsByYear");
      }

      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsByYear");
      }


      var pathParams = {
        'year': year,
        'page_num': pageNum
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Team];

      return this.apiClient.callApi(
        '/teams/{year}/{page_num}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsByYearKeys operation.
     * @callback module:api/TeamApi~getTeamsByYearKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamsByYearKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamsByYearKeys = function(year, pageNum, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamsByYearKeys");
      }

      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsByYearKeys");
      }


      var pathParams = {
        'year': year,
        'page_num': pageNum
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/teams/{year}/{page_num}/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsByYearSimple operation.
     * @callback module:api/TeamApi~getTeamsByYearSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
     * @param {Number} year Competition Year (or Season). Must be 4 digits.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamsByYearSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    this.getTeamsByYearSimple = function(year, pageNum, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamsByYearSimple");
      }

      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsByYearSimple");
      }


      var pathParams = {
        'year': year,
        'page_num': pageNum
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TeamSimple];

      return this.apiClient.callApi(
        '/teams/{year}/{page_num}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsKeys operation.
     * @callback module:api/TeamApi~getTeamsKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamsKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTeamsKeys = function(pageNum, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsKeys");
      }


      var pathParams = {
        'page_num': pageNum
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/teams/{page_num}/keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamsSimple operation.
     * @callback module:api/TeamApi~getTeamsSimpleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
     * @param {Number} pageNum Page number of results to return, zero-indexed
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
     * @param {module:api/TeamApi~getTeamsSimpleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    this.getTeamsSimple = function(pageNum, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling getTeamsSimple");
      }


      var pathParams = {
        'page_num': pageNum
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince']
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TeamSimple];

      return this.apiClient.callApi(
        '/teams/{page_num}/simple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
