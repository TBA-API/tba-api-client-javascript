/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DistrictList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DistrictList'));
  } else {
    // Browser globals (root is window)
    if (!root.TbaApiV3client) {
      root.TbaApiV3client = {};
    }
    root.TbaApiV3client.EventSimple = factory(root.TbaApiV3client.ApiClient, root.TbaApiV3client.DistrictList);
  }
}(this, function(ApiClient, DistrictList) {
  'use strict';




  /**
   * The EventSimple model module.
   * @module model/EventSimple
   * @version 3.03.1
   */

  /**
   * Constructs a new <code>EventSimple</code>.
   * @alias module:model/EventSimple
   * @class
   * @param key {String} TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
   * @param name {String} Official name of event on record either provided by FIRST or organizers of offseason event.
   * @param eventCode {String} Event short code, as provided by FIRST.
   * @param eventType {Number} Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
   * @param startDate {Date} Event start date in `yyyy-mm-dd` format.
   * @param endDate {Date} Event end date in `yyyy-mm-dd` format.
   * @param year {Number} Year the event data is for.
   */
  var exports = function(key, name, eventCode, eventType, startDate, endDate, year) {
    var _this = this;

    _this['key'] = key;
    _this['name'] = name;
    _this['event_code'] = eventCode;
    _this['event_type'] = eventType;




    _this['start_date'] = startDate;
    _this['end_date'] = endDate;
    _this['year'] = year;
  };

  /**
   * Constructs a <code>EventSimple</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventSimple} obj Optional instance to populate.
   * @return {module:model/EventSimple} The populated <code>EventSimple</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('key')) {
        obj['key'] = ApiClient.convertToType(data['key'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('event_code')) {
        obj['event_code'] = ApiClient.convertToType(data['event_code'], 'String');
      }
      if (data.hasOwnProperty('event_type')) {
        obj['event_type'] = ApiClient.convertToType(data['event_type'], 'Number');
      }
      if (data.hasOwnProperty('district')) {
        obj['district'] = DistrictList.constructFromObject(data['district']);
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('state_prov')) {
        obj['state_prov'] = ApiClient.convertToType(data['state_prov'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
      }
      if (data.hasOwnProperty('end_date')) {
        obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
      }
      if (data.hasOwnProperty('year')) {
        obj['year'] = ApiClient.convertToType(data['year'], 'Number');
      }
    }
    return obj;
  }

  /**
   * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
   * @member {String} key
   */
  exports.prototype['key'] = undefined;
  /**
   * Official name of event on record either provided by FIRST or organizers of offseason event.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Event short code, as provided by FIRST.
   * @member {String} event_code
   */
  exports.prototype['event_code'] = undefined;
  /**
   * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
   * @member {Number} event_type
   */
  exports.prototype['event_type'] = undefined;
  /**
   * The district this event is in, may be null.
   * @member {module:model/DistrictList} district
   */
  exports.prototype['district'] = undefined;
  /**
   * City, town, village, etc. the event is located in.
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * State or Province the event is located in.
   * @member {String} state_prov
   */
  exports.prototype['state_prov'] = undefined;
  /**
   * Country the event is located in.
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Event start date in `yyyy-mm-dd` format.
   * @member {Date} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * Event end date in `yyyy-mm-dd` format.
   * @member {Date} end_date
   */
  exports.prototype['end_date'] = undefined;
  /**
   * Year the event data is for.
   * @member {Number} year
   */
  exports.prototype['year'] = undefined;



  return exports;
}));


