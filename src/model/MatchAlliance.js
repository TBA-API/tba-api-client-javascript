/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MatchAlliance model module.
 * @module model/MatchAlliance
 * @version 3.5
 */
class MatchAlliance {
    /**
     * Constructs a new <code>MatchAlliance</code>.
     * @alias module:model/MatchAlliance
     * @param score {Number} Score for this alliance. Will be null or -1 for an unplayed match.
     * @param teamKeys {Array.<String>} 
     */
    constructor(score, teamKeys) { 
        
        MatchAlliance.initialize(this, score, teamKeys);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, score, teamKeys) { 
        obj['score'] = score;
        obj['team_keys'] = teamKeys;
    }

    /**
     * Constructs a <code>MatchAlliance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MatchAlliance} obj Optional instance to populate.
     * @return {module:model/MatchAlliance} The populated <code>MatchAlliance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MatchAlliance();

            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('team_keys')) {
                obj['team_keys'] = ApiClient.convertToType(data['team_keys'], ['String']);
            }
            if (data.hasOwnProperty('surrogate_team_keys')) {
                obj['surrogate_team_keys'] = ApiClient.convertToType(data['surrogate_team_keys'], ['String']);
            }
            if (data.hasOwnProperty('dq_team_keys')) {
                obj['dq_team_keys'] = ApiClient.convertToType(data['dq_team_keys'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Score for this alliance. Will be null or -1 for an unplayed match.
 * @member {Number} score
 */
MatchAlliance.prototype['score'] = undefined;

/**
 * @member {Array.<String>} team_keys
 */
MatchAlliance.prototype['team_keys'] = undefined;

/**
 * TBA team keys (eg `frc254`) of any teams playing as a surrogate.
 * @member {Array.<String>} surrogate_team_keys
 */
MatchAlliance.prototype['surrogate_team_keys'] = undefined;

/**
 * TBA team keys (eg `frc254`) of any disqualified teams.
 * @member {Array.<String>} dq_team_keys
 */
MatchAlliance.prototype['dq_team_keys'] = undefined;






export default MatchAlliance;

