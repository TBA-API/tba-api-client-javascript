/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TbaApiV3client) {
      root.TbaApiV3client = {};
    }
    root.TbaApiV3client.EventInsights2016 = factory(root.TbaApiV3client.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The EventInsights2016 model module.
   * @module model/EventInsights2016
   * @version 3.03.1
   */

  /**
   * Constructs a new <code>EventInsights2016</code>.
   * Insights for FIRST Stronghold qualification and elimination matches.
   * @alias module:model/EventInsights2016
   * @class
   * @param lowBar {Array.<Number>} For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param aChevalDeFrise {Array.<Number>} For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param aPortcullis {Array.<Number>} For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param bRamparts {Array.<Number>} For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param bMoat {Array.<Number>} For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param cSallyPort {Array.<Number>} For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param cDrawbridge {Array.<Number>} For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param dRoughTerrain {Array.<Number>} For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param dRockWall {Array.<Number>} For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @param averageHighGoals {Number} Average number of high goals scored.
   * @param averageLowGoals {Number} Average number of low goals scored.
   * @param breaches {Array.<Number>} An array with three values, number of times breached, number of opportunities to breach, and percentage.
   * @param scales {Array.<Number>} An array with three values, number of times scaled, number of opportunities to scale, and percentage.
   * @param challenges {Array.<Number>} An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
   * @param captures {Array.<Number>} An array with three values, number of times captured, number of opportunities to capture, and percentage.
   * @param averageWinScore {Number} Average winning score.
   * @param averageWinMargin {Number} Average margin of victory.
   * @param averageScore {Number} Average total score.
   * @param averageAutoScore {Number} Average autonomous score.
   * @param averageCrossingScore {Number} Average crossing score.
   * @param averageBoulderScore {Number} Average boulder score.
   * @param averageTowerScore {Number} Average tower score.
   * @param averageFoulScore {Number} Average foul score.
   * @param highScore {Array.<String>} An array with three values, high score, match key from the match with the high score, and the name of the match.
   */
  var exports = function(lowBar, aChevalDeFrise, aPortcullis, bRamparts, bMoat, cSallyPort, cDrawbridge, dRoughTerrain, dRockWall, averageHighGoals, averageLowGoals, breaches, scales, challenges, captures, averageWinScore, averageWinMargin, averageScore, averageAutoScore, averageCrossingScore, averageBoulderScore, averageTowerScore, averageFoulScore, highScore) {
    var _this = this;

    _this['LowBar'] = lowBar;
    _this['A_ChevalDeFrise'] = aChevalDeFrise;
    _this['A_Portcullis'] = aPortcullis;
    _this['B_Ramparts'] = bRamparts;
    _this['B_Moat'] = bMoat;
    _this['C_SallyPort'] = cSallyPort;
    _this['C_Drawbridge'] = cDrawbridge;
    _this['D_RoughTerrain'] = dRoughTerrain;
    _this['D_RockWall'] = dRockWall;
    _this['average_high_goals'] = averageHighGoals;
    _this['average_low_goals'] = averageLowGoals;
    _this['breaches'] = breaches;
    _this['scales'] = scales;
    _this['challenges'] = challenges;
    _this['captures'] = captures;
    _this['average_win_score'] = averageWinScore;
    _this['average_win_margin'] = averageWinMargin;
    _this['average_score'] = averageScore;
    _this['average_auto_score'] = averageAutoScore;
    _this['average_crossing_score'] = averageCrossingScore;
    _this['average_boulder_score'] = averageBoulderScore;
    _this['average_tower_score'] = averageTowerScore;
    _this['average_foul_score'] = averageFoulScore;
    _this['high_score'] = highScore;
  };

  /**
   * Constructs a <code>EventInsights2016</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventInsights2016} obj Optional instance to populate.
   * @return {module:model/EventInsights2016} The populated <code>EventInsights2016</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('LowBar')) {
        obj['LowBar'] = ApiClient.convertToType(data['LowBar'], ['Number']);
      }
      if (data.hasOwnProperty('A_ChevalDeFrise')) {
        obj['A_ChevalDeFrise'] = ApiClient.convertToType(data['A_ChevalDeFrise'], ['Number']);
      }
      if (data.hasOwnProperty('A_Portcullis')) {
        obj['A_Portcullis'] = ApiClient.convertToType(data['A_Portcullis'], ['Number']);
      }
      if (data.hasOwnProperty('B_Ramparts')) {
        obj['B_Ramparts'] = ApiClient.convertToType(data['B_Ramparts'], ['Number']);
      }
      if (data.hasOwnProperty('B_Moat')) {
        obj['B_Moat'] = ApiClient.convertToType(data['B_Moat'], ['Number']);
      }
      if (data.hasOwnProperty('C_SallyPort')) {
        obj['C_SallyPort'] = ApiClient.convertToType(data['C_SallyPort'], ['Number']);
      }
      if (data.hasOwnProperty('C_Drawbridge')) {
        obj['C_Drawbridge'] = ApiClient.convertToType(data['C_Drawbridge'], ['Number']);
      }
      if (data.hasOwnProperty('D_RoughTerrain')) {
        obj['D_RoughTerrain'] = ApiClient.convertToType(data['D_RoughTerrain'], ['Number']);
      }
      if (data.hasOwnProperty('D_RockWall')) {
        obj['D_RockWall'] = ApiClient.convertToType(data['D_RockWall'], ['Number']);
      }
      if (data.hasOwnProperty('average_high_goals')) {
        obj['average_high_goals'] = ApiClient.convertToType(data['average_high_goals'], 'Number');
      }
      if (data.hasOwnProperty('average_low_goals')) {
        obj['average_low_goals'] = ApiClient.convertToType(data['average_low_goals'], 'Number');
      }
      if (data.hasOwnProperty('breaches')) {
        obj['breaches'] = ApiClient.convertToType(data['breaches'], ['Number']);
      }
      if (data.hasOwnProperty('scales')) {
        obj['scales'] = ApiClient.convertToType(data['scales'], ['Number']);
      }
      if (data.hasOwnProperty('challenges')) {
        obj['challenges'] = ApiClient.convertToType(data['challenges'], ['Number']);
      }
      if (data.hasOwnProperty('captures')) {
        obj['captures'] = ApiClient.convertToType(data['captures'], ['Number']);
      }
      if (data.hasOwnProperty('average_win_score')) {
        obj['average_win_score'] = ApiClient.convertToType(data['average_win_score'], 'Number');
      }
      if (data.hasOwnProperty('average_win_margin')) {
        obj['average_win_margin'] = ApiClient.convertToType(data['average_win_margin'], 'Number');
      }
      if (data.hasOwnProperty('average_score')) {
        obj['average_score'] = ApiClient.convertToType(data['average_score'], 'Number');
      }
      if (data.hasOwnProperty('average_auto_score')) {
        obj['average_auto_score'] = ApiClient.convertToType(data['average_auto_score'], 'Number');
      }
      if (data.hasOwnProperty('average_crossing_score')) {
        obj['average_crossing_score'] = ApiClient.convertToType(data['average_crossing_score'], 'Number');
      }
      if (data.hasOwnProperty('average_boulder_score')) {
        obj['average_boulder_score'] = ApiClient.convertToType(data['average_boulder_score'], 'Number');
      }
      if (data.hasOwnProperty('average_tower_score')) {
        obj['average_tower_score'] = ApiClient.convertToType(data['average_tower_score'], 'Number');
      }
      if (data.hasOwnProperty('average_foul_score')) {
        obj['average_foul_score'] = ApiClient.convertToType(data['average_foul_score'], 'Number');
      }
      if (data.hasOwnProperty('high_score')) {
        obj['high_score'] = ApiClient.convertToType(data['high_score'], ['String']);
      }
    }
    return obj;
  }

  /**
   * For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} LowBar
   */
  exports.prototype['LowBar'] = undefined;
  /**
   * For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} A_ChevalDeFrise
   */
  exports.prototype['A_ChevalDeFrise'] = undefined;
  /**
   * For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} A_Portcullis
   */
  exports.prototype['A_Portcullis'] = undefined;
  /**
   * For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} B_Ramparts
   */
  exports.prototype['B_Ramparts'] = undefined;
  /**
   * For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} B_Moat
   */
  exports.prototype['B_Moat'] = undefined;
  /**
   * For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} C_SallyPort
   */
  exports.prototype['C_SallyPort'] = undefined;
  /**
   * For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} C_Drawbridge
   */
  exports.prototype['C_Drawbridge'] = undefined;
  /**
   * For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} D_RoughTerrain
   */
  exports.prototype['D_RoughTerrain'] = undefined;
  /**
   * For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
   * @member {Array.<Number>} D_RockWall
   */
  exports.prototype['D_RockWall'] = undefined;
  /**
   * Average number of high goals scored.
   * @member {Number} average_high_goals
   */
  exports.prototype['average_high_goals'] = undefined;
  /**
   * Average number of low goals scored.
   * @member {Number} average_low_goals
   */
  exports.prototype['average_low_goals'] = undefined;
  /**
   * An array with three values, number of times breached, number of opportunities to breach, and percentage.
   * @member {Array.<Number>} breaches
   */
  exports.prototype['breaches'] = undefined;
  /**
   * An array with three values, number of times scaled, number of opportunities to scale, and percentage.
   * @member {Array.<Number>} scales
   */
  exports.prototype['scales'] = undefined;
  /**
   * An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
   * @member {Array.<Number>} challenges
   */
  exports.prototype['challenges'] = undefined;
  /**
   * An array with three values, number of times captured, number of opportunities to capture, and percentage.
   * @member {Array.<Number>} captures
   */
  exports.prototype['captures'] = undefined;
  /**
   * Average winning score.
   * @member {Number} average_win_score
   */
  exports.prototype['average_win_score'] = undefined;
  /**
   * Average margin of victory.
   * @member {Number} average_win_margin
   */
  exports.prototype['average_win_margin'] = undefined;
  /**
   * Average total score.
   * @member {Number} average_score
   */
  exports.prototype['average_score'] = undefined;
  /**
   * Average autonomous score.
   * @member {Number} average_auto_score
   */
  exports.prototype['average_auto_score'] = undefined;
  /**
   * Average crossing score.
   * @member {Number} average_crossing_score
   */
  exports.prototype['average_crossing_score'] = undefined;
  /**
   * Average boulder score.
   * @member {Number} average_boulder_score
   */
  exports.prototype['average_boulder_score'] = undefined;
  /**
   * Average tower score.
   * @member {Number} average_tower_score
   */
  exports.prototype['average_tower_score'] = undefined;
  /**
   * Average foul score.
   * @member {Number} average_foul_score
   */
  exports.prototype['average_foul_score'] = undefined;
  /**
   * An array with three values, high score, match key from the match with the high score, and the name of the match.
   * @member {Array.<String>} high_score
   */
  exports.prototype['high_score'] = undefined;



  return exports;
}));


