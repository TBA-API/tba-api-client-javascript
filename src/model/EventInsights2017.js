/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TbaApiV3client) {
      root.TbaApiV3client = {};
    }
    root.TbaApiV3client.EventInsights2017 = factory(root.TbaApiV3client.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The EventInsights2017 model module.
   * @module model/EventInsights2017
   * @version 3.03.1
   */

  /**
   * Constructs a new <code>EventInsights2017</code>.
   * Insights for FIRST STEAMWORKS qualification and elimination matches.
   * @alias module:model/EventInsights2017
   * @class
   * @param averageFoulScore {Number} Average foul score.
   * @param averageFuelPoints {Number} Average fuel points scored.
   * @param averageFuelPointsAuto {Number} Average fuel points scored during auto.
   * @param averageFuelPointsTeleop {Number} Average fuel points scored during teleop.
   * @param averageHighGoals {Number} Average points scored in the high goal.
   * @param averageHighGoalsAuto {Number} Average points scored in the high goal during auto.
   * @param averageHighGoalsTeleop {Number} Average points scored in the high goal during teleop.
   * @param averageLowGoals {Number} Average points scored in the low goal.
   * @param averageLowGoalsAuto {Number} Average points scored in the low goal during auto.
   * @param averageLowGoalsTeleop {Number} Average points scored in the low goal during teleop.
   * @param averageMobilityPointsAuto {Number} Average mobility points scored during auto.
   * @param averagePointsAuto {Number} Average points scored during auto.
   * @param averagePointsTeleop {Number} Average points scored during teleop.
   * @param averageRotorPoints {Number} Average rotor points scored.
   * @param averageRotorPointsAuto {Number} Average rotor points scored during auto.
   * @param averageRotorPointsTeleop {Number} Average rotor points scored during teleop.
   * @param averageScore {Number} Average score.
   * @param averageTakeoffPointsTeleop {Number} Average takeoff points scored during teleop.
   * @param averageWinMargin {Number} Average margin of victory.
   * @param averageWinScore {Number} Average winning score.
   * @param highKpa {Array.<String>} An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
   * @param highScore {Array.<String>} An array with three values, high score, match key from the match with the high score, and the name of the match
   * @param kpaAchieved {Array.<Number>} An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
   * @param mobilityCounts {Array.<Number>} An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
   * @param rotor1Engaged {Array.<Number>} An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
   * @param rotor1EngagedAuto {Array.<Number>} An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @param rotor2Engaged {Array.<Number>} An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
   * @param rotor2EngagedAuto {Array.<Number>} An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @param rotor3Engaged {Array.<Number>} An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
   * @param rotor4Engaged {Array.<Number>} An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
   * @param takeoffCounts {Array.<Number>} An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
   * @param unicornMatches {Array.<Number>} An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
   */
  var exports = function(averageFoulScore, averageFuelPoints, averageFuelPointsAuto, averageFuelPointsTeleop, averageHighGoals, averageHighGoalsAuto, averageHighGoalsTeleop, averageLowGoals, averageLowGoalsAuto, averageLowGoalsTeleop, averageMobilityPointsAuto, averagePointsAuto, averagePointsTeleop, averageRotorPoints, averageRotorPointsAuto, averageRotorPointsTeleop, averageScore, averageTakeoffPointsTeleop, averageWinMargin, averageWinScore, highKpa, highScore, kpaAchieved, mobilityCounts, rotor1Engaged, rotor1EngagedAuto, rotor2Engaged, rotor2EngagedAuto, rotor3Engaged, rotor4Engaged, takeoffCounts, unicornMatches) {
    var _this = this;

    _this['average_foul_score'] = averageFoulScore;
    _this['average_fuel_points'] = averageFuelPoints;
    _this['average_fuel_points_auto'] = averageFuelPointsAuto;
    _this['average_fuel_points_teleop'] = averageFuelPointsTeleop;
    _this['average_high_goals'] = averageHighGoals;
    _this['average_high_goals_auto'] = averageHighGoalsAuto;
    _this['average_high_goals_teleop'] = averageHighGoalsTeleop;
    _this['average_low_goals'] = averageLowGoals;
    _this['average_low_goals_auto'] = averageLowGoalsAuto;
    _this['average_low_goals_teleop'] = averageLowGoalsTeleop;
    _this['average_mobility_points_auto'] = averageMobilityPointsAuto;
    _this['average_points_auto'] = averagePointsAuto;
    _this['average_points_teleop'] = averagePointsTeleop;
    _this['average_rotor_points'] = averageRotorPoints;
    _this['average_rotor_points_auto'] = averageRotorPointsAuto;
    _this['average_rotor_points_teleop'] = averageRotorPointsTeleop;
    _this['average_score'] = averageScore;
    _this['average_takeoff_points_teleop'] = averageTakeoffPointsTeleop;
    _this['average_win_margin'] = averageWinMargin;
    _this['average_win_score'] = averageWinScore;
    _this['high_kpa'] = highKpa;
    _this['high_score'] = highScore;
    _this['kpa_achieved'] = kpaAchieved;
    _this['mobility_counts'] = mobilityCounts;
    _this['rotor_1_engaged'] = rotor1Engaged;
    _this['rotor_1_engaged_auto'] = rotor1EngagedAuto;
    _this['rotor_2_engaged'] = rotor2Engaged;
    _this['rotor_2_engaged_auto'] = rotor2EngagedAuto;
    _this['rotor_3_engaged'] = rotor3Engaged;
    _this['rotor_4_engaged'] = rotor4Engaged;
    _this['takeoff_counts'] = takeoffCounts;
    _this['unicorn_matches'] = unicornMatches;
  };

  /**
   * Constructs a <code>EventInsights2017</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventInsights2017} obj Optional instance to populate.
   * @return {module:model/EventInsights2017} The populated <code>EventInsights2017</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('average_foul_score')) {
        obj['average_foul_score'] = ApiClient.convertToType(data['average_foul_score'], 'Number');
      }
      if (data.hasOwnProperty('average_fuel_points')) {
        obj['average_fuel_points'] = ApiClient.convertToType(data['average_fuel_points'], 'Number');
      }
      if (data.hasOwnProperty('average_fuel_points_auto')) {
        obj['average_fuel_points_auto'] = ApiClient.convertToType(data['average_fuel_points_auto'], 'Number');
      }
      if (data.hasOwnProperty('average_fuel_points_teleop')) {
        obj['average_fuel_points_teleop'] = ApiClient.convertToType(data['average_fuel_points_teleop'], 'Number');
      }
      if (data.hasOwnProperty('average_high_goals')) {
        obj['average_high_goals'] = ApiClient.convertToType(data['average_high_goals'], 'Number');
      }
      if (data.hasOwnProperty('average_high_goals_auto')) {
        obj['average_high_goals_auto'] = ApiClient.convertToType(data['average_high_goals_auto'], 'Number');
      }
      if (data.hasOwnProperty('average_high_goals_teleop')) {
        obj['average_high_goals_teleop'] = ApiClient.convertToType(data['average_high_goals_teleop'], 'Number');
      }
      if (data.hasOwnProperty('average_low_goals')) {
        obj['average_low_goals'] = ApiClient.convertToType(data['average_low_goals'], 'Number');
      }
      if (data.hasOwnProperty('average_low_goals_auto')) {
        obj['average_low_goals_auto'] = ApiClient.convertToType(data['average_low_goals_auto'], 'Number');
      }
      if (data.hasOwnProperty('average_low_goals_teleop')) {
        obj['average_low_goals_teleop'] = ApiClient.convertToType(data['average_low_goals_teleop'], 'Number');
      }
      if (data.hasOwnProperty('average_mobility_points_auto')) {
        obj['average_mobility_points_auto'] = ApiClient.convertToType(data['average_mobility_points_auto'], 'Number');
      }
      if (data.hasOwnProperty('average_points_auto')) {
        obj['average_points_auto'] = ApiClient.convertToType(data['average_points_auto'], 'Number');
      }
      if (data.hasOwnProperty('average_points_teleop')) {
        obj['average_points_teleop'] = ApiClient.convertToType(data['average_points_teleop'], 'Number');
      }
      if (data.hasOwnProperty('average_rotor_points')) {
        obj['average_rotor_points'] = ApiClient.convertToType(data['average_rotor_points'], 'Number');
      }
      if (data.hasOwnProperty('average_rotor_points_auto')) {
        obj['average_rotor_points_auto'] = ApiClient.convertToType(data['average_rotor_points_auto'], 'Number');
      }
      if (data.hasOwnProperty('average_rotor_points_teleop')) {
        obj['average_rotor_points_teleop'] = ApiClient.convertToType(data['average_rotor_points_teleop'], 'Number');
      }
      if (data.hasOwnProperty('average_score')) {
        obj['average_score'] = ApiClient.convertToType(data['average_score'], 'Number');
      }
      if (data.hasOwnProperty('average_takeoff_points_teleop')) {
        obj['average_takeoff_points_teleop'] = ApiClient.convertToType(data['average_takeoff_points_teleop'], 'Number');
      }
      if (data.hasOwnProperty('average_win_margin')) {
        obj['average_win_margin'] = ApiClient.convertToType(data['average_win_margin'], 'Number');
      }
      if (data.hasOwnProperty('average_win_score')) {
        obj['average_win_score'] = ApiClient.convertToType(data['average_win_score'], 'Number');
      }
      if (data.hasOwnProperty('high_kpa')) {
        obj['high_kpa'] = ApiClient.convertToType(data['high_kpa'], ['String']);
      }
      if (data.hasOwnProperty('high_score')) {
        obj['high_score'] = ApiClient.convertToType(data['high_score'], ['String']);
      }
      if (data.hasOwnProperty('kpa_achieved')) {
        obj['kpa_achieved'] = ApiClient.convertToType(data['kpa_achieved'], ['Number']);
      }
      if (data.hasOwnProperty('mobility_counts')) {
        obj['mobility_counts'] = ApiClient.convertToType(data['mobility_counts'], ['Number']);
      }
      if (data.hasOwnProperty('rotor_1_engaged')) {
        obj['rotor_1_engaged'] = ApiClient.convertToType(data['rotor_1_engaged'], ['Number']);
      }
      if (data.hasOwnProperty('rotor_1_engaged_auto')) {
        obj['rotor_1_engaged_auto'] = ApiClient.convertToType(data['rotor_1_engaged_auto'], ['Number']);
      }
      if (data.hasOwnProperty('rotor_2_engaged')) {
        obj['rotor_2_engaged'] = ApiClient.convertToType(data['rotor_2_engaged'], ['Number']);
      }
      if (data.hasOwnProperty('rotor_2_engaged_auto')) {
        obj['rotor_2_engaged_auto'] = ApiClient.convertToType(data['rotor_2_engaged_auto'], ['Number']);
      }
      if (data.hasOwnProperty('rotor_3_engaged')) {
        obj['rotor_3_engaged'] = ApiClient.convertToType(data['rotor_3_engaged'], ['Number']);
      }
      if (data.hasOwnProperty('rotor_4_engaged')) {
        obj['rotor_4_engaged'] = ApiClient.convertToType(data['rotor_4_engaged'], ['Number']);
      }
      if (data.hasOwnProperty('takeoff_counts')) {
        obj['takeoff_counts'] = ApiClient.convertToType(data['takeoff_counts'], ['Number']);
      }
      if (data.hasOwnProperty('unicorn_matches')) {
        obj['unicorn_matches'] = ApiClient.convertToType(data['unicorn_matches'], ['Number']);
      }
    }
    return obj;
  }

  /**
   * Average foul score.
   * @member {Number} average_foul_score
   */
  exports.prototype['average_foul_score'] = undefined;
  /**
   * Average fuel points scored.
   * @member {Number} average_fuel_points
   */
  exports.prototype['average_fuel_points'] = undefined;
  /**
   * Average fuel points scored during auto.
   * @member {Number} average_fuel_points_auto
   */
  exports.prototype['average_fuel_points_auto'] = undefined;
  /**
   * Average fuel points scored during teleop.
   * @member {Number} average_fuel_points_teleop
   */
  exports.prototype['average_fuel_points_teleop'] = undefined;
  /**
   * Average points scored in the high goal.
   * @member {Number} average_high_goals
   */
  exports.prototype['average_high_goals'] = undefined;
  /**
   * Average points scored in the high goal during auto.
   * @member {Number} average_high_goals_auto
   */
  exports.prototype['average_high_goals_auto'] = undefined;
  /**
   * Average points scored in the high goal during teleop.
   * @member {Number} average_high_goals_teleop
   */
  exports.prototype['average_high_goals_teleop'] = undefined;
  /**
   * Average points scored in the low goal.
   * @member {Number} average_low_goals
   */
  exports.prototype['average_low_goals'] = undefined;
  /**
   * Average points scored in the low goal during auto.
   * @member {Number} average_low_goals_auto
   */
  exports.prototype['average_low_goals_auto'] = undefined;
  /**
   * Average points scored in the low goal during teleop.
   * @member {Number} average_low_goals_teleop
   */
  exports.prototype['average_low_goals_teleop'] = undefined;
  /**
   * Average mobility points scored during auto.
   * @member {Number} average_mobility_points_auto
   */
  exports.prototype['average_mobility_points_auto'] = undefined;
  /**
   * Average points scored during auto.
   * @member {Number} average_points_auto
   */
  exports.prototype['average_points_auto'] = undefined;
  /**
   * Average points scored during teleop.
   * @member {Number} average_points_teleop
   */
  exports.prototype['average_points_teleop'] = undefined;
  /**
   * Average rotor points scored.
   * @member {Number} average_rotor_points
   */
  exports.prototype['average_rotor_points'] = undefined;
  /**
   * Average rotor points scored during auto.
   * @member {Number} average_rotor_points_auto
   */
  exports.prototype['average_rotor_points_auto'] = undefined;
  /**
   * Average rotor points scored during teleop.
   * @member {Number} average_rotor_points_teleop
   */
  exports.prototype['average_rotor_points_teleop'] = undefined;
  /**
   * Average score.
   * @member {Number} average_score
   */
  exports.prototype['average_score'] = undefined;
  /**
   * Average takeoff points scored during teleop.
   * @member {Number} average_takeoff_points_teleop
   */
  exports.prototype['average_takeoff_points_teleop'] = undefined;
  /**
   * Average margin of victory.
   * @member {Number} average_win_margin
   */
  exports.prototype['average_win_margin'] = undefined;
  /**
   * Average winning score.
   * @member {Number} average_win_score
   */
  exports.prototype['average_win_score'] = undefined;
  /**
   * An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
   * @member {Array.<String>} high_kpa
   */
  exports.prototype['high_kpa'] = undefined;
  /**
   * An array with three values, high score, match key from the match with the high score, and the name of the match
   * @member {Array.<String>} high_score
   */
  exports.prototype['high_score'] = undefined;
  /**
   * An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
   * @member {Array.<Number>} kpa_achieved
   */
  exports.prototype['kpa_achieved'] = undefined;
  /**
   * An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
   * @member {Array.<Number>} mobility_counts
   */
  exports.prototype['mobility_counts'] = undefined;
  /**
   * An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
   * @member {Array.<Number>} rotor_1_engaged
   */
  exports.prototype['rotor_1_engaged'] = undefined;
  /**
   * An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @member {Array.<Number>} rotor_1_engaged_auto
   */
  exports.prototype['rotor_1_engaged_auto'] = undefined;
  /**
   * An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
   * @member {Array.<Number>} rotor_2_engaged
   */
  exports.prototype['rotor_2_engaged'] = undefined;
  /**
   * An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @member {Array.<Number>} rotor_2_engaged_auto
   */
  exports.prototype['rotor_2_engaged_auto'] = undefined;
  /**
   * An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
   * @member {Array.<Number>} rotor_3_engaged
   */
  exports.prototype['rotor_3_engaged'] = undefined;
  /**
   * An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
   * @member {Array.<Number>} rotor_4_engaged
   */
  exports.prototype['rotor_4_engaged'] = undefined;
  /**
   * An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
   * @member {Array.<Number>} takeoff_counts
   */
  exports.prototype['takeoff_counts'] = undefined;
  /**
   * An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
   * @member {Array.<Number>} unicorn_matches
   */
  exports.prototype['unicorn_matches'] = undefined;



  return exports;
}));


