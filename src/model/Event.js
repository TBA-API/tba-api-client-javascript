/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DistrictList from './DistrictList';
import Webcast from './Webcast';

/**
 * The Event model module.
 * @module model/Event
 * @version 3.8.0
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     * @param key {String} TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     * @param name {String} Official name of event on record either provided by FIRST or organizers of offseason event.
     * @param eventCode {String} Event short code, as provided by FIRST.
     * @param eventType {Number} Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
     * @param startDate {Date} Event start date in `yyyy-mm-dd` format.
     * @param endDate {Date} Event end date in `yyyy-mm-dd` format.
     * @param year {Number} Year the event data is for.
     * @param eventTypeString {String} Event Type, eg Regional, District, or Offseason.
     */
    constructor(key, name, eventCode, eventType, startDate, endDate, year, eventTypeString) { 
        
        Event.initialize(this, key, name, eventCode, eventType, startDate, endDate, year, eventTypeString);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, name, eventCode, eventType, startDate, endDate, year, eventTypeString) { 
        obj['key'] = key;
        obj['name'] = name;
        obj['event_code'] = eventCode;
        obj['event_type'] = eventType;
        obj['start_date'] = startDate;
        obj['end_date'] = endDate;
        obj['year'] = year;
        obj['event_type_string'] = eventTypeString;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('event_code')) {
                obj['event_code'] = ApiClient.convertToType(data['event_code'], 'String');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = ApiClient.convertToType(data['event_type'], 'Number');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = DistrictList.constructFromObject(data['district']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state_prov')) {
                obj['state_prov'] = ApiClient.convertToType(data['state_prov'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
            if (data.hasOwnProperty('short_name')) {
                obj['short_name'] = ApiClient.convertToType(data['short_name'], 'String');
            }
            if (data.hasOwnProperty('event_type_string')) {
                obj['event_type_string'] = ApiClient.convertToType(data['event_type_string'], 'String');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('gmaps_place_id')) {
                obj['gmaps_place_id'] = ApiClient.convertToType(data['gmaps_place_id'], 'String');
            }
            if (data.hasOwnProperty('gmaps_url')) {
                obj['gmaps_url'] = ApiClient.convertToType(data['gmaps_url'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('location_name')) {
                obj['location_name'] = ApiClient.convertToType(data['location_name'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('first_event_id')) {
                obj['first_event_id'] = ApiClient.convertToType(data['first_event_id'], 'String');
            }
            if (data.hasOwnProperty('first_event_code')) {
                obj['first_event_code'] = ApiClient.convertToType(data['first_event_code'], 'String');
            }
            if (data.hasOwnProperty('webcasts')) {
                obj['webcasts'] = ApiClient.convertToType(data['webcasts'], [Webcast]);
            }
            if (data.hasOwnProperty('division_keys')) {
                obj['division_keys'] = ApiClient.convertToType(data['division_keys'], ['String']);
            }
            if (data.hasOwnProperty('parent_event_key')) {
                obj['parent_event_key'] = ApiClient.convertToType(data['parent_event_key'], 'String');
            }
            if (data.hasOwnProperty('playoff_type')) {
                obj['playoff_type'] = ApiClient.convertToType(data['playoff_type'], 'Number');
            }
            if (data.hasOwnProperty('playoff_type_string')) {
                obj['playoff_type_string'] = ApiClient.convertToType(data['playoff_type_string'], 'String');
            }
        }
        return obj;
    }


}

/**
 * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
 * @member {String} key
 */
Event.prototype['key'] = undefined;

/**
 * Official name of event on record either provided by FIRST or organizers of offseason event.
 * @member {String} name
 */
Event.prototype['name'] = undefined;

/**
 * Event short code, as provided by FIRST.
 * @member {String} event_code
 */
Event.prototype['event_code'] = undefined;

/**
 * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
 * @member {Number} event_type
 */
Event.prototype['event_type'] = undefined;

/**
 * @member {module:model/DistrictList} district
 */
Event.prototype['district'] = undefined;

/**
 * City, town, village, etc. the event is located in.
 * @member {String} city
 */
Event.prototype['city'] = undefined;

/**
 * State or Province the event is located in.
 * @member {String} state_prov
 */
Event.prototype['state_prov'] = undefined;

/**
 * Country the event is located in.
 * @member {String} country
 */
Event.prototype['country'] = undefined;

/**
 * Event start date in `yyyy-mm-dd` format.
 * @member {Date} start_date
 */
Event.prototype['start_date'] = undefined;

/**
 * Event end date in `yyyy-mm-dd` format.
 * @member {Date} end_date
 */
Event.prototype['end_date'] = undefined;

/**
 * Year the event data is for.
 * @member {Number} year
 */
Event.prototype['year'] = undefined;

/**
 * Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.
 * @member {String} short_name
 */
Event.prototype['short_name'] = undefined;

/**
 * Event Type, eg Regional, District, or Offseason.
 * @member {String} event_type_string
 */
Event.prototype['event_type_string'] = undefined;

/**
 * Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
 * @member {Number} week
 */
Event.prototype['week'] = undefined;

/**
 * Address of the event's venue, if available.
 * @member {String} address
 */
Event.prototype['address'] = undefined;

/**
 * Postal code from the event address.
 * @member {String} postal_code
 */
Event.prototype['postal_code'] = undefined;

/**
 * Google Maps Place ID for the event address.
 * @member {String} gmaps_place_id
 */
Event.prototype['gmaps_place_id'] = undefined;

/**
 * Link to address location on Google Maps.
 * @member {String} gmaps_url
 */
Event.prototype['gmaps_url'] = undefined;

/**
 * Latitude for the event address.
 * @member {Number} lat
 */
Event.prototype['lat'] = undefined;

/**
 * Longitude for the event address.
 * @member {Number} lng
 */
Event.prototype['lng'] = undefined;

/**
 * Name of the location at the address for the event, eg. Blue Alliance High School.
 * @member {String} location_name
 */
Event.prototype['location_name'] = undefined;

/**
 * Timezone name.
 * @member {String} timezone
 */
Event.prototype['timezone'] = undefined;

/**
 * The event's website, if any.
 * @member {String} website
 */
Event.prototype['website'] = undefined;

/**
 * The FIRST internal Event ID, used to link to the event on the FRC webpage.
 * @member {String} first_event_id
 */
Event.prototype['first_event_id'] = undefined;

/**
 * Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
 * @member {String} first_event_code
 */
Event.prototype['first_event_code'] = undefined;

/**
 * @member {Array.<module:model/Webcast>} webcasts
 */
Event.prototype['webcasts'] = undefined;

/**
 * An array of event keys for the divisions at this event.
 * @member {Array.<String>} division_keys
 */
Event.prototype['division_keys'] = undefined;

/**
 * The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.
 * @member {String} parent_event_key
 */
Event.prototype['parent_event_key'] = undefined;

/**
 * Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.
 * @member {Number} playoff_type
 */
Event.prototype['playoff_type'] = undefined;

/**
 * String representation of the `playoff_type`, or null.
 * @member {String} playoff_type_string
 */
Event.prototype['playoff_type_string'] = undefined;






export default Event;

