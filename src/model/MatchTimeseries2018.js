/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.04.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MatchTimeseries2018 model module.
 * @module model/MatchTimeseries2018
 * @version 3.04.1
 */
class MatchTimeseries2018 {
    /**
     * Constructs a new <code>MatchTimeseries2018</code>.
     * Timeseries data for the 2018 game *FIRST* POWER UP. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
     * @alias module:model/MatchTimeseries2018
     */
    constructor() { 
        
        MatchTimeseries2018.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MatchTimeseries2018</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MatchTimeseries2018} obj Optional instance to populate.
     * @return {module:model/MatchTimeseries2018} The populated <code>MatchTimeseries2018</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MatchTimeseries2018();

            if (data.hasOwnProperty('event_key')) {
                obj['event_key'] = ApiClient.convertToType(data['event_key'], 'String');
            }
            if (data.hasOwnProperty('match_id')) {
                obj['match_id'] = ApiClient.convertToType(data['match_id'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('play')) {
                obj['play'] = ApiClient.convertToType(data['play'], 'Number');
            }
            if (data.hasOwnProperty('time_remaining')) {
                obj['time_remaining'] = ApiClient.convertToType(data['time_remaining'], 'Number');
            }
            if (data.hasOwnProperty('blue_auto_quest')) {
                obj['blue_auto_quest'] = ApiClient.convertToType(data['blue_auto_quest'], 'Number');
            }
            if (data.hasOwnProperty('blue_boost_count')) {
                obj['blue_boost_count'] = ApiClient.convertToType(data['blue_boost_count'], 'Number');
            }
            if (data.hasOwnProperty('blue_boost_played')) {
                obj['blue_boost_played'] = ApiClient.convertToType(data['blue_boost_played'], 'Number');
            }
            if (data.hasOwnProperty('blue_current_powerup')) {
                obj['blue_current_powerup'] = ApiClient.convertToType(data['blue_current_powerup'], 'String');
            }
            if (data.hasOwnProperty('blue_face_the_boss')) {
                obj['blue_face_the_boss'] = ApiClient.convertToType(data['blue_face_the_boss'], 'Number');
            }
            if (data.hasOwnProperty('blue_force_count')) {
                obj['blue_force_count'] = ApiClient.convertToType(data['blue_force_count'], 'Number');
            }
            if (data.hasOwnProperty('blue_force_played')) {
                obj['blue_force_played'] = ApiClient.convertToType(data['blue_force_played'], 'Number');
            }
            if (data.hasOwnProperty('blue_levitate_count')) {
                obj['blue_levitate_count'] = ApiClient.convertToType(data['blue_levitate_count'], 'Number');
            }
            if (data.hasOwnProperty('blue_levitate_played')) {
                obj['blue_levitate_played'] = ApiClient.convertToType(data['blue_levitate_played'], 'Number');
            }
            if (data.hasOwnProperty('blue_powerup_time_remaining')) {
                obj['blue_powerup_time_remaining'] = ApiClient.convertToType(data['blue_powerup_time_remaining'], 'String');
            }
            if (data.hasOwnProperty('blue_scale_owned')) {
                obj['blue_scale_owned'] = ApiClient.convertToType(data['blue_scale_owned'], 'Number');
            }
            if (data.hasOwnProperty('blue_score')) {
                obj['blue_score'] = ApiClient.convertToType(data['blue_score'], 'Number');
            }
            if (data.hasOwnProperty('blue_switch_owned')) {
                obj['blue_switch_owned'] = ApiClient.convertToType(data['blue_switch_owned'], 'Number');
            }
            if (data.hasOwnProperty('red_auto_quest')) {
                obj['red_auto_quest'] = ApiClient.convertToType(data['red_auto_quest'], 'Number');
            }
            if (data.hasOwnProperty('red_boost_count')) {
                obj['red_boost_count'] = ApiClient.convertToType(data['red_boost_count'], 'Number');
            }
            if (data.hasOwnProperty('red_boost_played')) {
                obj['red_boost_played'] = ApiClient.convertToType(data['red_boost_played'], 'Number');
            }
            if (data.hasOwnProperty('red_current_powerup')) {
                obj['red_current_powerup'] = ApiClient.convertToType(data['red_current_powerup'], 'String');
            }
            if (data.hasOwnProperty('red_face_the_boss')) {
                obj['red_face_the_boss'] = ApiClient.convertToType(data['red_face_the_boss'], 'Number');
            }
            if (data.hasOwnProperty('red_force_count')) {
                obj['red_force_count'] = ApiClient.convertToType(data['red_force_count'], 'Number');
            }
            if (data.hasOwnProperty('red_force_played')) {
                obj['red_force_played'] = ApiClient.convertToType(data['red_force_played'], 'Number');
            }
            if (data.hasOwnProperty('red_levitate_count')) {
                obj['red_levitate_count'] = ApiClient.convertToType(data['red_levitate_count'], 'Number');
            }
            if (data.hasOwnProperty('red_levitate_played')) {
                obj['red_levitate_played'] = ApiClient.convertToType(data['red_levitate_played'], 'Number');
            }
            if (data.hasOwnProperty('red_powerup_time_remaining')) {
                obj['red_powerup_time_remaining'] = ApiClient.convertToType(data['red_powerup_time_remaining'], 'String');
            }
            if (data.hasOwnProperty('red_scale_owned')) {
                obj['red_scale_owned'] = ApiClient.convertToType(data['red_scale_owned'], 'Number');
            }
            if (data.hasOwnProperty('red_score')) {
                obj['red_score'] = ApiClient.convertToType(data['red_score'], 'Number');
            }
            if (data.hasOwnProperty('red_switch_owned')) {
                obj['red_switch_owned'] = ApiClient.convertToType(data['red_switch_owned'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
 * @member {String} event_key
 */
MatchTimeseries2018.prototype['event_key'] = undefined;

/**
 * Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.
 * @member {String} match_id
 */
MatchTimeseries2018.prototype['match_id'] = undefined;

/**
 * Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.
 * @member {String} mode
 */
MatchTimeseries2018.prototype['mode'] = undefined;

/**
 * @member {Number} play
 */
MatchTimeseries2018.prototype['play'] = undefined;

/**
 * Amount of time remaining in the match, only valid during `auto` and `teleop` modes.
 * @member {Number} time_remaining
 */
MatchTimeseries2018.prototype['time_remaining'] = undefined;

/**
 * 1 if the blue alliance is credited with the AUTO QUEST, 0 if not.
 * @member {Number} blue_auto_quest
 */
MatchTimeseries2018.prototype['blue_auto_quest'] = undefined;

/**
 * Number of POWER CUBES in the BOOST section of the blue alliance VAULT.
 * @member {Number} blue_boost_count
 */
MatchTimeseries2018.prototype['blue_boost_count'] = undefined;

/**
 * Returns 1 if the blue alliance BOOST was played, or 0 if not played.
 * @member {Number} blue_boost_played
 */
MatchTimeseries2018.prototype['blue_boost_played'] = undefined;

/**
 * Name of the current blue alliance POWER UP being played, or `null`.
 * @member {String} blue_current_powerup
 */
MatchTimeseries2018.prototype['blue_current_powerup'] = undefined;

/**
 * 1 if the blue alliance is credited with FACING THE BOSS, 0 if not.
 * @member {Number} blue_face_the_boss
 */
MatchTimeseries2018.prototype['blue_face_the_boss'] = undefined;

/**
 * Number of POWER CUBES in the FORCE section of the blue alliance VAULT.
 * @member {Number} blue_force_count
 */
MatchTimeseries2018.prototype['blue_force_count'] = undefined;

/**
 * Returns 1 if the blue alliance FORCE was played, or 0 if not played.
 * @member {Number} blue_force_played
 */
MatchTimeseries2018.prototype['blue_force_played'] = undefined;

/**
 * Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.
 * @member {Number} blue_levitate_count
 */
MatchTimeseries2018.prototype['blue_levitate_count'] = undefined;

/**
 * Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.
 * @member {Number} blue_levitate_played
 */
MatchTimeseries2018.prototype['blue_levitate_played'] = undefined;

/**
 * Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.
 * @member {String} blue_powerup_time_remaining
 */
MatchTimeseries2018.prototype['blue_powerup_time_remaining'] = undefined;

/**
 * 1 if the blue alliance owns the SCALE, 0 if not.
 * @member {Number} blue_scale_owned
 */
MatchTimeseries2018.prototype['blue_scale_owned'] = undefined;

/**
 * Current score for the blue alliance.
 * @member {Number} blue_score
 */
MatchTimeseries2018.prototype['blue_score'] = undefined;

/**
 * 1 if the blue alliance owns their SWITCH, 0 if not.
 * @member {Number} blue_switch_owned
 */
MatchTimeseries2018.prototype['blue_switch_owned'] = undefined;

/**
 * 1 if the red alliance is credited with the AUTO QUEST, 0 if not.
 * @member {Number} red_auto_quest
 */
MatchTimeseries2018.prototype['red_auto_quest'] = undefined;

/**
 * Number of POWER CUBES in the BOOST section of the red alliance VAULT.
 * @member {Number} red_boost_count
 */
MatchTimeseries2018.prototype['red_boost_count'] = undefined;

/**
 * Returns 1 if the red alliance BOOST was played, or 0 if not played.
 * @member {Number} red_boost_played
 */
MatchTimeseries2018.prototype['red_boost_played'] = undefined;

/**
 * Name of the current red alliance POWER UP being played, or `null`.
 * @member {String} red_current_powerup
 */
MatchTimeseries2018.prototype['red_current_powerup'] = undefined;

/**
 * 1 if the red alliance is credited with FACING THE BOSS, 0 if not.
 * @member {Number} red_face_the_boss
 */
MatchTimeseries2018.prototype['red_face_the_boss'] = undefined;

/**
 * Number of POWER CUBES in the FORCE section of the red alliance VAULT.
 * @member {Number} red_force_count
 */
MatchTimeseries2018.prototype['red_force_count'] = undefined;

/**
 * Returns 1 if the red alliance FORCE was played, or 0 if not played.
 * @member {Number} red_force_played
 */
MatchTimeseries2018.prototype['red_force_played'] = undefined;

/**
 * Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.
 * @member {Number} red_levitate_count
 */
MatchTimeseries2018.prototype['red_levitate_count'] = undefined;

/**
 * Returns 1 if the red alliance LEVITATE was played, or 0 if not played.
 * @member {Number} red_levitate_played
 */
MatchTimeseries2018.prototype['red_levitate_played'] = undefined;

/**
 * Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.
 * @member {String} red_powerup_time_remaining
 */
MatchTimeseries2018.prototype['red_powerup_time_remaining'] = undefined;

/**
 * 1 if the red alliance owns the SCALE, 0 if not.
 * @member {Number} red_scale_owned
 */
MatchTimeseries2018.prototype['red_scale_owned'] = undefined;

/**
 * Current score for the red alliance.
 * @member {Number} red_score
 */
MatchTimeseries2018.prototype['red_score'] = undefined;

/**
 * 1 if the red alliance owns their SWITCH, 0 if not.
 * @member {Number} red_switch_owned
 */
MatchTimeseries2018.prototype['red_switch_owned'] = undefined;






export default MatchTimeseries2018;

