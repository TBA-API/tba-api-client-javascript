/**
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TbaApiV3client) {
      root.TbaApiV3client = {};
    }
    root.TbaApiV3client.Webcast = factory(root.TbaApiV3client.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Webcast model module.
   * @module model/Webcast
   * @version 3.03.1
   */

  /**
   * Constructs a new <code>Webcast</code>.
   * @alias module:model/Webcast
   * @class
   * @param type {module:model/Webcast.TypeEnum} Type of webcast, typically descriptive of the streaming provider.
   * @param channel {String} Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.
   */
  var exports = function(type, channel) {
    var _this = this;

    _this['type'] = type;
    _this['channel'] = channel;

  };

  /**
   * Constructs a <code>Webcast</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Webcast} obj Optional instance to populate.
   * @return {module:model/Webcast} The populated <code>Webcast</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('channel')) {
        obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
      }
      if (data.hasOwnProperty('file')) {
        obj['file'] = ApiClient.convertToType(data['file'], 'String');
      }
    }
    return obj;
  }

  /**
   * Type of webcast, typically descriptive of the streaming provider.
   * @member {module:model/Webcast.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.
   * @member {String} channel
   */
  exports.prototype['channel'] = undefined;
  /**
   * File identification as may be required for some types. May be null.
   * @member {String} file
   */
  exports.prototype['file'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "youtube"
     * @const
     */
    "youtube": "youtube",
    /**
     * value: "twitch"
     * @const
     */
    "twitch": "twitch",
    /**
     * value: "ustream"
     * @const
     */
    "ustream": "ustream",
    /**
     * value: "iframe"
     * @const
     */
    "iframe": "iframe",
    /**
     * value: "html5"
     * @const
     */
    "html5": "html5",
    /**
     * value: "rtmp"
     * @const
     */
    "rtmp": "rtmp",
    /**
     * value: "livestream"
     * @const
     */
    "livestream": "livestream"  };


  return exports;
}));


